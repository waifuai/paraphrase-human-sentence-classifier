#!/usr/bin/env python3
"""
Model interaction module for the Human/Machine Sentence Classifier using Google GenAI SDK.
"""

import os
import logging
from pathlib import Path
from typing import Optional

# New SDK import
try:
    from google import genai
except Exception as e:
    genai = None

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# --- Configuration ---
DEFAULT_GEMINI_MODEL = "gemini-2.5-pro"
API_KEY_FILE_PATH = Path.home() / ".api-gemini"  # Path to the API key file in home directory

# --- Global state ---
_client: Optional["genai.Client"] = None

def _read_key_file() -> Optional[str]:
    """Read API key from ~/.api-gemini if present."""
    try:
        if API_KEY_FILE_PATH.is_file():
            logging.info(f"Reading API key from {API_KEY_FILE_PATH}")
            return API_KEY_FILE_PATH.read_text(encoding="utf-8").strip()
        return None
    except Exception as e:
        logging.error(f"Failed to read API key from {API_KEY_FILE_PATH}: {e}")
        return None

def _resolve_api_key() -> Optional[str]:
    """Resolve API key using env first, fallback to ~/.api-gemini."""
    # Respect explicit empty to simulate 'no key' in tests
    if "GEMINI_API_KEY" in os.environ and os.environ.get("GEMINI_API_KEY", "").strip() == "":
        return None
    if "GOOGLE_API_KEY" in os.environ and os.environ.get("GOOGLE_API_KEY", "").strip() == "":
        return None
    env_key = os.getenv("GEMINI_API_KEY") or os.getenv("GOOGLE_API_KEY")
    if env_key and env_key.strip():
        return env_key.strip()
    return _read_key_file()

def _ensure_client() -> bool:
    """Initialize a singleton genai.Client."""
    global _client
    if _client is not None:
        return True
    if genai is None:
        logging.error("google-genai SDK not available. Install with: google-genai~=1.28")
        return False
    api_key = _resolve_api_key()
    if not api_key:
        logging.error("No API key found in GEMINI_API_KEY / GOOGLE_API_KEY or ~/.api-gemini")
        return False
    try:
        _client = genai.Client(api_key=api_key)
        logging.info("Google GenAI client initialized.")
        return True
    except Exception as e:
        logging.error(f"Failed to initialize Google GenAI client: {e}")
        _client = None
        return False

def classify_with_gemini(text: str, model_name: str = DEFAULT_GEMINI_MODEL) -> Optional[str]:
    """
    Classifies the input text as human-written ('1') or machine-generated ('0') using Gemini.

    Args:
        text: The text sentence to classify.
        model_name: The specific Gemini model to use.

    Returns:
        '1' if classified as human, '0' if classified as machine, or None on error.
    """
    if not _ensure_client():
        return None

    prompt = (
        "Classify the following sentence based on whether it sounds like it was "
        "written by a human or generated by a machine like an AI paraphrase tool.\n\n"
        "Categories:\n"
        "- '1': Human-written\n"
        "- '0': Machine-generated\n\n"
        "Respond with ONLY the digit '0' or '1'. Do not include any other text, "
        "explanation, or punctuation.\n\n"
        f"Sentence: \"{text}\"\n\n"
        "Classification:"
    )

    try:
        # New SDK call style: client.models.generate_content(...)
        resp = _client.models.generate_content(
            model=model_name,
            contents=prompt
        )
        # Response shape differs from legacy; adapt cautiously
        # Prefer a conservative extraction path:
        generated_text = None
        try:
            # SDK may expose text directly
            if hasattr(resp, "text") and isinstance(resp.text, str):
                generated_text = resp.text.strip()
        except Exception:
            pass
        if generated_text is None:
            # Fallback to candidates[0].content.parts[0].text style if exposed
            cand = getattr(resp, "candidates", None)
            if cand and len(cand) > 0:
                content = getattr(cand[0], "content", None)
                parts = getattr(content, "parts", None)
                if parts and len(parts) > 0 and hasattr(parts[0], "text"):
                    generated_text = parts[0].text.strip()

        if not generated_text:
            logging.warning("GenAI response contained no text content.")
            return None

        if generated_text in ("0", "1"):
            return generated_text
        # Heuristic fallback identical to legacy behavior
        if "0" in generated_text and "1" not in generated_text:
            return "0"
        if "1" in generated_text and "0" not in generated_text:
            return "1"
        logging.warning(f"Unexpected output: '{generated_text}'. Expected '0' or '1'.")
        return None
    except Exception as e:
        logging.error(f"Error during GenAI API call for text '{text[:50]}...': {e}")
        return None

if __name__ == "__main__":
    print("--- Testing GenAI Classifier ---")
    if not _ensure_client():
        print("Client not available. Ensure API key env var or ~/.api-gemini is set.")
    else:
        examples = [
            "This is a sentence written by a real person, expressing a genuine thought.",
            "Pursuant to the aforementioned communication, the requested data has been compiled.",
            "The sky is blue.",
        ]
        for ex in examples:
            res = classify_with_gemini(ex)
            print(f"Text: {ex}\nResult: {res}\n")